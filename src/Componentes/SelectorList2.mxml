<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="600" height="500"  xmlns:Componentes="Componentes.*"
		 creationComplete="bordercontainer1_creationCompleteHandler(event)" xmlns:modelo="services.modelo.*" xmlns:ns="http://code.google.com/p/flexlib/"
		 >
	<fx:Script>
		<![CDATA[
			import VO.EmpresaVO;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			import services.modelo.Modelo;
			
			[Bindable]public var arrTodos:ArrayCollection = new ArrayCollection();
			[Bindable]private var arrSelect:ArrayCollection = new ArrayCollection();
			public var idn:int = 0;
			public var conPram:Boolean = true;
			[Bindable]public var codInsert:String = '';
			[Bindable]public var labelInsert:String = '';
			public var modelo:*;
			public var servicioInvocado:String;
			[Bindable] private var add:Number = 0;
			public var fnPost:Function;
			
			private function setToolTipStyle():void {
				styleManager.getStyleDeclaration("mx.controls.ToolTip").setStyle("fontStyle","italic");
				styleManager.getStyleDeclaration("mx.controls.ToolTip").setStyle("fontSize","19");
				/*styleManager.getStyleDeclaration("mx.controls.ToolTip").setStyle("fontFamily","Arial");
				styleManager.getStyleDeclaration("mx.controls.ToolTip").setStyle("color","#FF6699");
				styleManager.getStyleDeclaration("mx.controls.ToolTip").setStyle("backgroundColor","#33CC99");*/
			}
			
			protected function bordercontainer1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				setToolTipStyle();
				this.addEventListener(Event.ENTER_FRAME, oscurese);
			}
			
			private function oscurese(event:Event):void{
				add += 0.01;
				if(add > 0.5){
					this.removeEventListener(Event.ENTER_FRAME, oscurese);
				}
			}
			
			protected function lTodos_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
				if(arrTodos == null){
					if(conPram){
						infoResult.token = modelo[servicioInvocado](idn);	
					} else {
						infoResult.token = modelo[servicioInvocado]();
					}
					infoResult.addEventListener(ResultEvent.RESULT, llenaList);
				} else {
					arrTodos.filterFunction = null;
					arrTodos.refresh();
				}
				
				
				
				
			}
			
			private function llenaList(event:ResultEvent):void{
				var arr:ArrayCollection = event.result as ArrayCollection;
				for each(var o:Object in arr){
					arrTodos.addItem(o);
					
				}
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(fnPost != null){
					
					fnPost.apply(this, [this, lSelect.dataProvider as ArrayCollection]);
				}
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(lSelect.dataProvider.length > 0){
					for each(var o:Object in arrSelect){
						arrTodos.addItem(o);
					}
				}
				PopUpManager.removePopUp(this);
			}
			
			
			protected function tiBuscar_changeHandler(event:Event):void
			{
				//recuperamos el texto de la caja de busqueda y lo convierto a minusculas
				str2search = StringUtil.trim(tiBuscar.text).toLowerCase();
				//validamos que no este vacia
				if (str2search != "")
				{
					//si no esta vacia, aplicamos la funcion
					arrTodos.filterFunction = busca;
				}
				else
				{
					//si esta vacia, quitamos la funcion de filtrado
					arrTodos.filterFunction = null;
				}
				//despues de cualquier filterFunction, se tiene que aplicar el metodo refresh
				arrTodos.refresh();
			}
			private var str2search:String = "";
			private function busca(item:EmpresaVO):Boolean
			{
				//variable de retorno
				var ret:Boolean = false;
				//variable que almacenara el nombre de cada indice del elemento
				var p:String = "";
				//variable que almacenara el valor del elemento
				var str:String = "";
				//recorro cada indice del elemento
				
				//no quiero que busque en la propiedad mx_internal_uid
				if (!item.incluida)
				{
					//recupero el valor del elemento y lo convierto a minusculas
					str = String(item.nombre).toLowerCase();
					//veo si la cadena de busqueda existe en el valor del elemento
					if (str.indexOf(str2search) != -1)
					{
						//si existe, regreso un true para que el elemento sea agregado al proveedor
						ret = true;
						//termino el ciclo, no hay necesidad de seguir buscando
						
					}
				}
				
				//regreso el valor Boolean
				return ret;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:RadioButtonGroup id="radiogroup"/>
		<s:CallResponder id="infoResult"/>
		
	</fx:Declarations>
	<s:Rect width="100%" height="100%" alpha="{add}">
		<s:fill>
			<s:SolidColor color="#000000" />
		</s:fill>
	</s:Rect>
	<s:BorderContainer top="50" width="600" height="500" cornerRadius="5" horizontalCenter="0">
		
		<s:HGroup width="100%" horizontalAlign="right">
			<ns:PromptingTextInput id="tiBuscar" prompt="Buscar..." change="tiBuscar_changeHandler(event)"/>
		</s:HGroup>
		<Componentes:TitledBorderBox title="SelecciÃ³n de Empresas" left="15" right="15" bottom="15" top="50">
			<s:Group width="100%" height="100%">
				<s:List id="lTodos" left="15" top="42" bottom="40" width="250" height="100%"
						creationComplete="lTodos_creationCompleteHandler(event)" dataProvider="{arrTodos}"
						dragMoveEnabled="true" dragEnabled="true" dropEnabled="true"
						labelField="{labelInsert}" allowMultipleSelection="true"			
						>
					
				</s:List>
				
				<s:List id="lSelect" right="15" top="42" bottom="40" width="250" dataProvider="{arrSelect}" height="100%"
						dragMoveEnabled="true"  dragEnabled="true" dropEnabled="true"
						labelField="{labelInsert}" allowMultipleSelection="true"
						></s:List>
				<s:Label y="24" left="15" fontSize="12" fontWeight="bold" text="Empresas"/>
				<s:Label x="333" y="25" fontSize="12" fontWeight="bold" text="Seleccionadas"/>	
				<s:Button bottom="10" horizontalCenter="0" label="Grabar" click="button1_clickHandler(event)"/>
			</s:Group>
			
		</Componentes:TitledBorderBox>
		<s:Button x="518" y="0" label="Cerrar" click="button2_clickHandler(event)"/>
		
		
	</s:BorderContainer>



</s:Group>
