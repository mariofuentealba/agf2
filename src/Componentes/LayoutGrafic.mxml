<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:Componentes="Componentes.*"
		 width="400" height="300">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.CubeEvent;
			import mx.managers.PopUpManager;
			import mx.olap.IOLAPCube;
			import mx.olap.IOLAPQuery;
			import mx.olap.IOLAPQueryAxis;
			import mx.olap.OLAPQuery;
			import mx.olap.OLAPResult;
			import mx.olap.OLAPSet;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			[Bindable]public var flatData:ArrayCollection = new ArrayCollection();
			[Bindable]public var olapData:OLAPResult;
			
			
			public var olapx:IList;
			public var olapy:IList;
			public var arrAct:ArrayCollection = new ArrayCollection();
			public var arrAct2:ArrayCollection = new ArrayCollection();
			public var arrAct3:ArrayCollection = new ArrayCollection();
			public var _arr:ArrayCollection;
			public var _arrReferente:ArrayCollection;
			public var _arrVariacion:ArrayCollection;
			[Bindable] public var seriesColumn:Array = [];
			
			private function creationCompleteHandler():void {
				// You must initialize the cube before you 
				// can execute a query on it.
				myMXMLCube.refresh();
			}
			
			// Create the OLAP query.
			private function getQuery(cube:IOLAPCube):IOLAPQuery {
				// Create an instance of OLAPQuery to represent the query. 
				var query:OLAPQuery = new OLAPQuery;
				
				// Get the row axis from the query instance.
				var rowQueryAxis:IOLAPQueryAxis = 
					query.getAxis(OLAPQuery.ROW_AXIS);
				// Create an OLAPSet instance to configure the axis.
				var productSet:OLAPSet = new OLAPSet;
				// Add the Product to the row to aggregate data 
				// by the Product dimension.
				productSet.addElements(
					cube.findDimension("RSODim").findAttribute("RSO").children);
				// Add the OLAPSet instance to the axis.
				rowQueryAxis.addSet(productSet);
				
				// Get the column axis from the query instance, and configure it
				// to aggregate the columns by the Quarter dimension. 
				var colQueryAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.COLUMN_AXIS);  
				var yearSet:OLAPSet= new OLAPSet;
				yearSet.addElements(
					cube.findDimension("TimeDim").findAttribute("Year").children);
				var quarterSet:OLAPSet= new OLAPSet;
				quarterSet.addElements(
					cube.findDimension("TimeDim").findAttribute("Periodo").children);
				colQueryAxis.addSet(yearSet.crossJoin(quarterSet));
				
				olapx = cube.findDimension("TimeDim").findAttribute("Periodo").children
				olapy = cube.findDimension("RSODim").findAttribute("RSO").children;
				return query;       
			}
			
			// Event handler to execute the OLAP query 
			// after the cube completes initialization.
			private function runQuery(event:CubeEvent):void {
				// Get cube.
				var cube:IOLAPCube = IOLAPCube(event.currentTarget);
				// Create a query instance.
				var query:IOLAPQuery = getQuery(cube);
				// Execute the query.
				var token:AsyncToken = cube.execute(query);
				// Setup handlers for the query results.
				token.addResponder(new AsyncResponder(showResult, showFault));
			}
			
			// Handle a query fault.
			private function showFault(result:Object, token:Object):void {
				Alert.show("Error in query.");
				//PopUpManager.removePopUp(bloqueo);
			}
			
			// Handle a successful query by passing the query results to 
			// the OLAPDataGrid control..
			private function showResult(result:Object, token:Object):void {
				if (!result) {
					Alert.show("No results from query.");
					return;
				}
				olapData= result as OLAPResult;            
			}   
			protected function columnasChart_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				flatData = new ArrayCollection();
				if(event.target.className == 'RadioButton'){
					switch(event.target.label){
						case 'Normal':
							columnasChart.prov = arrAct;
							flatData = this._arr;
							/*for each(var o:Object in this._arr){
							if(o['graf'] == 1){
							flatData.addItem({periodo: o['label'], rso: o['rso'], valor: o['valor'], year: o['year']});
							}
							
							}*/
							break;
						case 'Referente':
							columnasChart.prov = arrAct2;
							flatData = this._arrReferente;
							/*for each(o in this._arr){
							if(o['graf'] != 1){
							flatData.addItem({periodo: o['label'], rso: o['rso'], valor: o['valor'], year: o['year']});
							}
							
							}*/
							break;
						case 'Variación':
							columnasChart.prov = arrAct3;
							var j:int = 0;
							var count:int = 0;
							var x:int = 0;
							
							count = arrAct3.getItemAt(0)['arr']['length'];
							flatData = this._arrVariacion;
							
							/*for(var i:int = count; i < this._arr.length; i++){
							o = this._arr.getItemAt(i);
							if(o['graf'] == 1){
							if(j < count){
							} else {
							x++;
							j = 0;
							}
							flatData.addItem({periodo: o['label'], rso: o['rso'], valor: roundDecimals(arrAct3.getItemAt(x)['a' + (j++)] as Number, 1), year: o['year']});
							}
							}*/
							break;
					}
					
				}
				
				myMXMLCube.refresh();
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:OLAPCube name="FlatSchemaCube" dataProvider="{flatData}" id="myMXMLCube" complete="runQuery(event);">
			<!--mx:OLAPDimension name="CustomerDim">
			<mx:OLAPAttribute name="Customer" dataField="customer"/>
			<mx:OLAPHierarchy name="CustomerHier" hasAll="true">
			<mx:OLAPLevel attributeName="Customer"/>
			</mx:OLAPHierarchy>
			</mx:OLAPDimension-->
			
			<mx:OLAPDimension name="RSODim">
				<mx:OLAPAttribute name="RSO" dataField="rso"/>
				<mx:OLAPHierarchy name="RSOHier" hasAll="true">
					<mx:OLAPLevel attributeName="RSO"/>
				</mx:OLAPHierarchy>
			</mx:OLAPDimension>
			
			<mx:OLAPDimension name="TimeDim">
				<mx:OLAPAttribute name="Year" dataField="year"/>
				<mx:OLAPAttribute name="Periodo" dataField="periodo"/>
				<mx:OLAPHierarchy name="TimeHier" hasAll="true">
					<mx:OLAPLevel attributeName="Year"/>					
					<mx:OLAPLevel attributeName="Periodo"/>
				</mx:OLAPHierarchy> 
			</mx:OLAPDimension>
			
			<mx:OLAPMeasure name="Valor" 
							dataField="valor" 
							aggregator="SUM"/><!--aggregator="SUM"-->
		</mx:OLAPCube>
	</fx:Declarations>
	<s:NavigatorContent label="Gráfico">
		<mx:TabNavigator id="tnGrafico" width="700" height="100%"
						 horizontalCenter="0">
			<s:NavigatorContent id="nvGrafico" width="100%" height="100%"
								label="Gráfico">
				<Componentes:GraficoBarrasAGF name="columnasChart" id="columnasChart" left="0"
											  right="0" top="0" bottom="0"
											  serie="{seriesColumn}"
											  prov="{arrAct}"
											  click="columnasChart_clickHandler(event)" width="100%">
				</Componentes:GraficoBarrasAGF>
			</s:NavigatorContent>
			<!--s:NavigatorContent width="100%" height="100%" label="Matriz">
				<s:DataGrid id="dataGrid2" left="10" right="50" top="40"
							requestedRowCount="15">
					<s:columns>		
						<s:ArrayList>
							<s:GridColumn dataField="nombre_final"
										  headerText="nombre_final"></s:GridColumn>
							<s:GridColumn dataField="label" headerText="periodo"></s:GridColumn>
							<s:GridColumn visible="false" dataField="id_tag_agf"
										  headerText="id_tag_agf"></s:GridColumn>
							<s:GridColumn dataField="valor" headerText="valor"></s:GridColumn>
							<s:GridColumn visible="false" dataField="id_periodo"
										  headerText="id_periodo"></s:GridColumn>
							
							
							<s:GridColumn visible="false" dataField="id_empresa"
										  headerText="id_empresa"></s:GridColumn>
						</s:ArrayList>
					</s:columns>
					<s:AsyncListView list="{valoresResult.lastResult}">
						
					</s:AsyncListView>
				</s:DataGrid>
			</s:NavigatorContent-->
			<s:NavigatorContent width="100%" height="100%" label="olap">
				<s:VGroup horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
					<s:HGroup id="hgOLAP" horizontalCenter="0" verticalCenter="0" width="100%">
						<mx:OLAPDataGrid id="olap" left="10" top="10" height="300" dataProvider="{olapData}"/>
						
					</s:HGroup>
					<s:HScrollBar viewport="{hgOLAP}" 
								  left="{hgOLAP.left}" 
								  width ="{hgOLAP.width}"/>	
				</s:VGroup>
				
				
			</s:NavigatorContent>
		</mx:TabNavigator>								
	</s:NavigatorContent>
</s:Group>
